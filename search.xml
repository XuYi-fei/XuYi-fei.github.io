<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法总览</title>
      <link href="suan-fa/suan-fa-zong-lan/"/>
      <url>suan-fa/suan-fa-zong-lan/</url>
      
        <content type="html"><![CDATA[<p>算法各链接分类放在这个版块下方便进行进一步查找和跳转。</p><h1 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h1><h3 id="路径规划："><a href="#路径规划：" class="headerlink" title="路径规划："></a>路径规划：</h3><ul><li><a href="../lu-jing-gui-hua-suan-fa-1/">RRT系列(RRT、RRT*等)</a></li></ul><h3 id="最短路径："><a href="#最短路径：" class="headerlink" title="最短路径："></a>最短路径：</h3><ul><li>迪杰斯特拉算法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总览 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径规划的相关算法(2) PRM</title>
      <link href="suan-fa/lu-jing-gui-hua-suan-fa-2/"/>
      <url>suan-fa/lu-jing-gui-hua-suan-fa-2/</url>
      
        <content type="html"><![CDATA[<p>基于无人机路径规划做的调研总结。</p><p><strong>参考文章</strong>：</p><p><strong>以下确有段落和图片借鉴原文，在此处只是为了记录个人学习经验，如有侵权联系本人删除。</strong></p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>有二维平面上的一些电线杆需要巡检，现要无人机从起始点到最终的进行巡检，途中有一定障碍物，设计算法。在不考虑太多因素时可以暂且先想成最短路规划。</p><h3 id="PRM算法"><a href="#PRM算法" class="headerlink" title="PRM算法"></a>PRM算法</h3><p>基于结点的算法，旨在先对点进行采样，算法只是为了得到点，还要辅助以其他算法进行规划</p><ul><li><p>算法流程：</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219154305350.png" alt="算法概述"></p><ol><li><p>初始化：</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219154357048.png" alt="左上为起点，右下为终点"></p><ol start="2"><li><p>构型采样：</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219154430696.png" alt="随机采样50个点"></p><ol start="3"><li><p>邻域计算、边线连接、碰撞检测：</p><p>对于每个点，考虑以$r_0$为范围内的相邻点，进行直线连接，连接后进行碰撞检测，检测失败就取消连线。($r_0$为预设的值)</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219154548695.png" alt="检测碰撞并且连线"></p></li><li><p>结束条件</p><p>利用最短路径的搜索方法如迪杰斯特拉算法、A*算法等进行规划</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219154743357.png" alt="利用A*搜素得到路径"></p></li></ol></li></ol></li></ol></li><li><p>问题：采样点数多少很影响最终路径的规划结果，甚至可能找不到路径。另外还需要借助其他算法辅助规划。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 路径规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="jiao-cheng/ge-ren-bo-ke-hexo-da-jian/"/>
      <url>jiao-cheng/ge-ren-bo-ke-hexo-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="个人博客的配置教程"><a href="#个人博客的配置教程" class="headerlink" title="个人博客的配置教程"></a>个人博客的配置教程</h1><p>此教程并非完全原创，也有白嫖的，但是经过个人亲自配置过的。教程针对windows系统，Linux系统课参考</p><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p><p>主要流程是 <strong>安装Hexo, 配置域名, 搭建自己的博客,根据框架自定义修改</strong></p><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>不多解释，如果你还不知道Git是什么，那可以和<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖老师</a>聊一聊，总之配置的过程不是很难，win下去官网下载Git即可。<a href="https://gitforwindows.org/">Download git</a></p><p><strong>使用<code>git --version</code>查看版本</strong>   如果正确安装应该如下显示一个版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git version 2.27.0.windows.1</code></p><h4 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h4><p>就像写C需要MinGW，写python一样安装python一样，这里也要安装相应的库，否则就会如各种DLL模块丢失出现的情况一样。依然是提供windows解决方案。<a href="https://nodejs.org/en/download/">windows NodeJS下载</a> 选择LTS版本下载即可。</p><p><strong>使用<code>node -v</code></strong> 和 <strong><code>npm -v</code>查看版本，使用刚刚安装好的git bash就好了（之后也都是）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>6.14.11</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>v14.15.5</code></p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h4><p>创建 文件夹，然后进入这个文件夹，右键使用<strong>git bash</strong>打开，然后开始运行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用<code>hexo -v</code>查看版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-clihexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>INFO  Validating config hexo: 5.3.0 hexo-cli: 4.2.0 os: Windows_NT 10.0.18363 win32 x64 node: 14.15.5 v8: 8.4.371.19-node.18 uv: 1.40.0 zlib: 1.2.11 brotli: 1.0.9 ares: 1.16.1 modules: 83 nghttp2: 1.41.0 napi: 7 llhttp: 2.1.3 openssl: 1.1.1i cldr: 37.0 icu: 67.1 tz: 2020a unicode: 13.0</code></p><p>这样就安装完成了。</p><h4 id="4-hexo初始化（基本配置）"><a href="#4-hexo初始化（基本配置）" class="headerlink" title="4. hexo初始化（基本配置）"></a>4. hexo初始化（基本配置）</h4><p>“myblog”为自己选的名字，会创建一个同名的文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> myblog<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成后执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo ghexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时在本机的<code>localhost:4000</code>已经生成了网页</p><h4 id="5-GitHub仓库"><a href="#5-GitHub仓库" class="headerlink" title="5. GitHub仓库"></a>5. GitHub仓库</h4><p>创建一个新仓库，名字要和用户名一样并且加后缀，示例：</p><p>我的github账户名是<strong>XuYi-fei</strong>,新建的仓库名称那一栏就要输<strong>XuYi-fei.github.io</strong></p><p>按照教程添加<a href="../git-github-pei-zhi/">公钥</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 博客 </tag>
            
            <tag> 个人网站 </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git  github相关配置教程(非语法)</title>
      <link href="jiao-cheng/git-github-pei-zhi/"/>
      <url>jiao-cheng/git-github-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p><strong>主要融合相关配置教程的网站或者经验。</strong></p><h1 id="Git-相关配置教程"><a href="#Git-相关配置教程" class="headerlink" title="Git 相关配置教程"></a>Git 相关配置教程</h1><h1 id="GitHub相关配置教程"><a href="#GitHub相关配置教程" class="headerlink" title="GitHub相关配置教程"></a>GitHub相关配置教程</h1><h3 id="1-GitHub添加公钥"><a href="#1-GitHub添加公钥" class="headerlink" title="1. GitHub添加公钥"></a>1. GitHub添加公钥</h3><p><a href="https://blog.csdn.net/fenghuibian/article/details/73350890">配置公钥教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 报错 </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径规划的相关算法(1)RRT系列</title>
      <link href="suan-fa/lu-jing-gui-hua-suan-fa-1/"/>
      <url>suan-fa/lu-jing-gui-hua-suan-fa-1/</url>
      
        <content type="html"><![CDATA[<p>基于无人机路径规划做的调研总结。</p><p><strong>参考文章</strong>：</p><p><strong>以下确有段落和图片借鉴原文，在此处只是为了记录个人学习经验，如有侵权联系本人删除。</strong></p><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>有二维平面上的一些电线杆需要巡检，现要无人机从起始点到最终的进行巡检，途中有一定障碍物，设计算法。在不考虑太多因素时可以暂且先想成最短路规划。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>考虑了各个电线杆是TSP问题，考虑两个电线杆之间怎么走是最短路问题，TSP的问题解法较为常规，之后可以再进行分析；这里分析两点间由障碍物的情况下如何进行规划。</p><h3 id="调研的主流3D-UAV路径规划算法"><a href="#调研的主流3D-UAV路径规划算法" class="headerlink" title="调研的主流3D UAV路径规划算法"></a>调研的主流3D UAV路径规划算法</h3><p>虽说研究问题为二维平面，但是3D的思想同样适用，毕竟降维调研没什么问题，因此进行论文的总结</p><ul><li><strong>Sampling Based Algorithms</strong> （RRT系列）</li><li><strong>Node Based Optimal Algorithms</strong>  （调研PRM及辅助完成PRM规划的A*）</li><li><strong>Mathematic Model Based Algorithms</strong> （简述）</li><li><strong>Bio-inspired Algorithms</strong>  （简述）</li><li><strong>Multi-fusion Based Algorithms</strong> （简述）</li></ul><hr><h2 id="具体算法调研分析："><a href="#具体算法调研分析：" class="headerlink" title="具体算法调研分析："></a>具体算法调研分析：</h2><h3 id="Sampling-Based-Algorithms"><a href="#Sampling-Based-Algorithms" class="headerlink" title="Sampling Based Algorithms"></a>Sampling Based Algorithms</h3><p>基于采样的算法，以RRT为主</p><h4 id="RRT-Rapidly-Exploring-Random-Trees"><a href="#RRT-Rapidly-Exploring-Random-Trees" class="headerlink" title="RRT(**Rapidly-Exploring Random Trees)**"></a><strong>RRT(**Rapidly-Exploring Random Trees</strong>)**</h4><ul><li>其主要流程如下：</li></ul><ol><li>将起点作为根节点；</li><li>在机器人的工作空间中，随机生成一个位姿点。</li><li>在位姿树上寻找2中位姿点的最近邻位姿点。</li><li>在3中的两个位姿构造插值点，判断它们是否与障碍物碰撞。如不碰撞，将2中的位姿加入位姿树。</li><li>判断随机位姿是否到达目标点附近或迭代步数到达最大值，如到达目标点，溯源获得路径。</li></ol><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219002302393.png" alt="image-20210219002302393"></p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219002309543.png" alt="image-20210219002309543"></p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219002314504.png" alt="image-20210219002314504"></p><ul><li>问题： <strong>每次的点毕竟是随机的，仍然可能不是全局最优的。</strong></li></ul><h4 id="RRT-算法"><a href="#RRT-算法" class="headerlink" title="*RRT****算法**"></a>*<em>RRT****</em>算法**</h4><p>相比于RRT算法，多了两个过程，分别为：</p><ol><li><p>重新为 Xnew 选择父节点的过程， 即re-choose parent过程。</p></li><li><p>重布线随机树的过程，rewire过程</p><p><strong>注：</strong>Xnew<strong>就是每次迭代新选的点</strong></p></li></ol><p>其实是每次迭代后，都会在局部更新搜索树以优化半径</p><p>流程如下：</p><p>图中9为新选择的点，6则为在RRT树算法中9的父节点（即当前RRT树中距离9最近的点，字母分别为Xinit、Xnear、Xnew）</p><ol><li>在新产生的节点 Xnew 附近以<strong>定义的半径范围</strong>内寻找“近邻”，作为替换Xnew 父节点的备选。依次计算“近邻”节点到起点的路径代价加上Xnew到每个“近邻”的路径<strong>代价</strong>，具体过程见下图；将Xnew连接到路径代价最小的一个“近邻”。（第一步完成）</li></ol><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219002921833.png" alt="image-20210219002921833"></p><ol start="2"><li> 在为Xnew 重新选择父节点之后，为<strong>进一步使得随机树节点间连接的代价尽量小</strong>，为随机树进行重新布线。过程示意如图4重布线的过程也可以被表述成：如果近邻节点的父节点改为 Xnew可以减小路径代价，则进行更改。（第二步完成）</li></ol><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219003012757.png" alt="image-20210219003012757"></p><h4 id="RRTConnect算法"><a href="#RRTConnect算法" class="headerlink" title="RRTConnect算法"></a>RRTConnect算法</h4><p>该算法与原始RRT相比，在目标点区域建立第二棵树进行扩展。每一次迭代中，开始步骤与原始的RRT算法一样，都是采样随机点然后进行扩展。然后扩展完第一棵树的新节点𝑞𝑛𝑒𝑤后，以这个新的目标点作为第二棵树扩展的方向。同时第二棵树扩展的方式略有不同首先它会扩展第一步得到𝑞′𝑛𝑒𝑤，如果没有碰撞，继续往相同的方向扩展第二步，直到扩展失败或者𝑞′𝑛𝑒𝑤=𝑞𝑛𝑒𝑤表示与第一棵树相连了，即connect了，整个算法结束。</p><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/image-20210219003118899.png" alt="image-20210219003118899"></p><p><strong>特点：</strong></p><ol><li>每次迭代中必须考虑两棵树的平衡性，即两棵树的节点数的多少（也可以考虑两棵树总共花费的路径长度），交换次序选择“小”的那棵树进行扩展。</li><li>Connect算法较之前的算法在扩展的步长上更长，使得树的生长更快</li><li>两棵树不断朝向对方交替扩展，而不是采用随机扩展的方式，特别当起始位姿和目标位姿处于约束区域时，两棵树可以通过朝向对方快速扩展而逃离各自的约束区域。</li></ol><p><img src="https://gitee.com/XuYi-fei/picgo_imgs/raw/master/1220093-20180406155130480-46713537.gif" alt="Picture1"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 路径规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
